name: 📚 Deploy Documentation

on:
  push:
    branches: [main]
    paths:
      - "docs/**"
      - ".github/workflows/docs.yml"
      - "README.md"
      - "goal-kit/README.md"
  workflow_dispatch:

env:
  NODE_VERSION: "20"

jobs:
  build-docs:
    name: 📝 Build Documentation
    runs-on: ubuntu-latest

    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install Documentation Tools
        run: |
          npm install -g markdownlint-cli prettier
          sudo apt-get install -y pandoc texlive-latex-base texlive-fonts-recommended

      - name: 📝 Validate Documentation
        run: |
          echo "📝 Validating documentation files..."

          # Check README files
          if [ -f "README.md" ]; then
            echo "✅ Found main README.md"
            markdownlint README.md || echo "Linting issues found in README.md"
          fi

          if [ -f "goal-kit/README.md" ]; then
            echo "✅ Found goal-kit README.md"
            markdownlint goal-kit/README.md || echo "Linting issues found in goal-kit README.md"
          fi

          # Check template documentation
          find goal-kit/templates -name "*.md" -exec echo "📄 Validating {}" \; -exec markdownlint {} \; || echo "Some template files have linting issues"

          echo "✅ Documentation validation completed"

      - name: 🎨 Format Documentation
        run: |
          echo "🎨 Formatting documentation..."

          # Format main README
          if [ -f "README.md" ]; then
            prettier --write README.md 2>/dev/null || echo "Could not format README.md"
          fi

          # Format goal-kit README
          if [ -f "goal-kit/README.md" ]; then
            prettier --write goal-kit/README.md 2>/dev/null || echo "Could not format goal-kit README.md"
          fi

          echo "✅ Documentation formatting completed"

      - name: 📋 Generate Documentation Index
        run: |
          echo "📋 Generating documentation index..."

          cat > docs/README.md << 'EOF'
          # Goal-Kit Documentation

          ## 📚 Documentation Overview

          This directory contains comprehensive documentation for Goal-Kit, a goal management template system for AI agents.

          ## 📖 Available Documentation

          ### 🚀 Getting Started
          - [Main README](../README.md) - Overview and quick start
          - [Installation Guide](installation.md) - Setup instructions
          - [Quick Start Guide](quickstart.md) - Fast track to using Goal-Kit

          ### 🤖 AI Agent Integration
          - [Cursor Integration](cursor-integration.md) - Using with Cursor
          - [Claude Integration](claude-integration.md) - Using with Claude
          - [Qwen Integration](qwen-integration.md) - Using with Qwen
          - [Roo Integration](roo-integration.md) - Using with Roo

          ### 🛠️ Development
          - [Template Development](template-development.md) - Creating custom templates
          - [Script Development](script-development.md) - Writing automation scripts
          - [Contributing Guide](../goal-kit/CONTRIBUTING.md) - How to contribute

          ### 📋 Reference
          - [Template Reference](template-reference.md) - Complete template documentation
          - [Script Reference](script-reference.md) - All available scripts
          - [Command Reference](command-reference.md) - AI agent commands
          - [API Reference](api-reference.md) - Programmatic interface

          ## 📁 Directory Structure

          ```
          docs/
          ├── README.md                 # This file
          ├── installation.md          # Installation guide
          ├── quickstart.md            # Quick start guide
          ├── development/
          │   ├── template-dev.md      # Template development
          │   ├── script-dev.md        # Script development
          │   └── testing.md           # Testing guide
          ├── integration/
          │   ├── cursor.md            # Cursor-specific docs
          │   ├── claude.md            # Claude-specific docs
          │   └── qwen.md              # Qwen-specific docs
          └── reference/
              ├── templates.md         # Template reference
              ├── scripts.md           # Script reference
              └── commands.md          # Command reference
          ```

          ## 🚀 Quick Links

          - [🐙 GitHub Repository](https://github.com/your-repo/goal-kit)
          - [📦 Latest Release](https://github.com/your-repo/goal-kitreleases/latest)
          - [🐛 Report Issues](https://github.com/your-repo/goal-kit/issues)
          - [💬 Discussions](https://github.com/your-repo/goal-kit/discussions)

          ---

          *Documentation last updated: $(date -u)*
          EOF

          echo "✅ Documentation index generated"

      - name: 📊 Generate Documentation Stats
        run: |
          echo "📊 Generating documentation statistics..."

          cat > docs/documentation-stats.md << EOF
          # Documentation Statistics

          ## 📈 Overview
          Generated: $(date -u)

          ## 📊 File Statistics
          EOF

          # Count different file types
          echo "### File Types" >> docs/documentation-stats.md
          echo "| Type | Count | Total Size |" >> docs/documentation-stats.md
          echo "|------|-------|------------|" >> docs/documentation-stats.md

          # Markdown files
          md_count=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)
          md_size=$(find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" -exec ls -la {} \; | awk '{sum+=$5} END{print sum}')
          echo "| Markdown | $md_count | $(numfmt --to=iec $md_size) |" >> docs/documentation-stats.md

          # JSON files
          json_count=$(find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)
          json_size=$(find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*" -exec ls -la {} \; | awk '{sum+=$5} END{print sum}')
          echo "| JSON | $json_count | $(numfmt --to=iec $json_size) |" >> docs/documentation-stats.md

          # Shell scripts
          sh_count=$(find . -name "*.sh" -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)
          sh_size=$(find . -name "*.sh" -not -path "./node_modules/*" -not -path "./.git/*" -exec ls -la {} \; | awk '{sum+=$5} END{print sum}')
          echo "| Shell Scripts | $sh_count | $(numfmt --to=iec $sh_size) |" >> docs/documentation-stats.md

          # PowerShell scripts
          ps_count=$(find . -name "*.ps1" -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)
          ps_size=$(find . -name "*.ps1" -not -path "./node_modules/*" -not -path "./.git/*" -exec ls -la {} \; | awk '{sum+=$5} END{print sum}')
          echo "| PowerShell Scripts | $ps_count | $(numfmt --to=iec $ps_size) |" >> docs/documentation-stats.md

          # TOML files
          toml_count=$(find . -name "*.toml" -not -path "./node_modules/*" -not -path "./.git/*" | wc -l)
          toml_size=$(find . -name "*.toml" -not -path "./node_modules/*" -not -path "./.git/*" -exec ls -la {} \; | awk '{sum+=$5} END{print sum}')
          echo "| TOML | $toml_count | $(numfmt --to=iec $toml_size) |" >> docs/documentation-stats.md

          echo "" >> docs/documentation-stats.md
          echo "## 📝 Documentation Quality" >> docs/documentation-stats.md

          # Check for common documentation issues
          echo "### Quality Checks" >> docs/documentation-stats.md
          echo "- README files: $(find . -name "README.md" | wc -l)" >> docs/documentation-stats.md
          echo "- License file: $(if [ -f "LICENSE" ]; then echo "✅ Present"; else echo "❌ Missing"; fi)" >> docs/documentation-stats.md
          echo "- Contributing guide: $(if [ -f "CONTRIBUTING.md" ]; then echo "✅ Present"; else echo "❌ Missing"; fi)" >> docs/documentation-stats.md

          echo "" >> docs/documentation-stats.md
          echo "## 🎯 Documentation Score" >> docs/documentation-stats.md
          total_score=0
          max_score=10

          [ $md_count -gt 5 ] && ((total_score+=2)) || ((total_score+=1))
          [ -f "README.md" ] && ((total_score+=2))
          [ -f "LICENSE" ] && ((total_score+=2))
          [ -f "CONTRIBUTING.md" ] && ((total_score+=2))
          [ $json_count -gt 0 ] && ((total_score+=1))
          [ $sh_count -gt 0 ] && ((total_score+=1))

          echo "**Score: $total_score/$max_score**" >> docs/documentation-stats.md

          if [ $total_score -ge 8 ]; then
            echo "**Rating: 🟢 Excellent**" >> docs/documentation-stats.md
          elif [ $total_score -ge 6 ]; then
            echo "**Rating: 🟡 Good**" >> docs/documentation-stats.md
          else
            echo "**Rating: 🔴 Needs Improvement**" >> docs/documentation-stats.md
          fi

          echo "" >> docs/documentation-stats.md
          echo "📅 Last updated: $(date -u)" >> docs/documentation-stats.md

          echo "✅ Documentation statistics generated"

  deploy-docs:
    name: 🚀 Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4

      - name: 📤 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          cname: docs.goal-kit.dev # Optional: custom domain

      - name: 📋 Generate Deployment Summary
        run: |
          echo "🚀 Documentation Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📚 Deployment Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed to:** GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📄 Files Deployed" >> $GITHUB_STEP_SUMMARY
          find docs -type f -name "*.md" | while read file; do
            echo "- ✅ $file" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Access URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation Site:** https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** https://github.com/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## 📋 Deployment Status: ✅ SUCCESS" >> $GITHUB_STEP_SUMMARY
